{"version":3,"file":"index.modern.js","sources":["../src/events.ts","../src/constants.ts","../src/index.ts","../src/validation.ts"],"sourcesContent":["import { Transaction } from './interfaces';\n\n/**\n * This function is responsible updating the xp when the monetization API\n * sends a payment update\n *\n * @param {number} assetScale the assetScale returned from monetization API\n * @param {number} amount the amount to increment by\n * @param {number} currentBalance the current experience\n * @param {number} multiplier a multiplier for the amount\n *\n * @returns {number} the new xp value\n */\nexport function createTransaction({\n  assetScale,\n  amount,\n  currentBalance,\n  multiplier,\n}: Transaction): number {\n  return updateBalance({\n    currentBalance,\n    amount: Number(getScaledAmount(amount, assetScale)),\n    multiplier,\n  });\n}\n\n/**\n * This function increments the current xp by a provided amount\n *\n * @param {number} xp the current experience\n * @param {number} amount the amount to add\n * @param {number} multiplier a multiplier for the amount\n *\n * @returns {number} the incremented value\n */\nexport function updateBalance({\n  currentBalance,\n  amount,\n  multiplier,\n}: Partial<Transaction>): number {\n  return (currentBalance += amount * multiplier);\n}\n\n/**\n * This function returns experience adjusted to the provided assetScale\n * returned from the web monetization API\n *\n * @param {number} amount the amount\n * @param {number} scale the assetScale returned from monetization API\n *\n * @returns {string} the scaled experience\n */\nexport function getScaledAmount(amount: number, scale: number): string {\n  return (amount * Math.pow(10, -scale)).toFixed(scale);\n}\n","export const MONETIZATION_PROGRESS = 'monetizationprogress';\nexport const REQUIRED_PARAMS = ['currentBalance', 'multiplier'];\nexport const NO_OP = (): void => {};\n","import { createTransaction } from './events';\nimport { validateParams } from './validation';\nimport { BandiEventProps, InitProps, EventDetail } from './interfaces';\nimport { MONETIZATION_PROGRESS, NO_OP } from './constants';\n\nconst BandiEvents = (): BandiEventProps => {\n  let currentBalance: number;\n  let multiplier: number;\n  let onTransaction: (args: number) => number | void;\n  let active = false;\n\n  /**\n   * Set up the initial properties and start the monetizationprogress event listener\n   *\n   * @param {Object} params the params for initializing\n   * @param {number} params.currentBalance the user's current point balance\n   * @param {number} params.multiplier a multiplier to use when incrementing point values\n   * @param {Function} [params.onTransaction] optional callback for when transaction is created\n   * @returns {void}\n   */\n  function init(params: InitProps): void {\n    try {\n      if (!(document as any).monetization) {\n        throw new Error('Monetization not initialized');\n      }\n\n      validateParams(params);\n\n      currentBalance = params.currentBalance;\n      multiplier = params.multiplier;\n      onTransaction = params.onTransaction || NO_OP;\n\n      startMonetization();\n    } catch (e) {\n      throw new Error(`Something went wrong: ${e}`);\n    }\n  }\n\n  /**\n   * This function is called on every iteration of the monetizationprogress\n   * event. It takes in an event object containing the amount received, and\n   * the scale (number of places past the decimal for the amount)\n   * Read more here: https://webmonetization.org/docs/api\n   *\n   * @param {Object} detail the detail param pulled from the event\n   * @param {number} detail.assetScale the scale to use\n   * @param {number} detail.amount the destination amount received\n   * @returns {void}\n   */\n  function transactionEvent({ detail }: { detail: EventDetail }): void {\n    if (!active) {\n      return;\n    }\n    const { amount, assetScale } = detail;\n\n    const newBalance = createTransaction({\n      assetScale,\n      amount,\n      currentBalance,\n      multiplier,\n    });\n\n    setBalance(newBalance);\n    onTransaction(newBalance);\n  }\n\n  /**\n   * Update the user's current balance\n   *\n   * @param {number} newBalance the user's updated balance\n   * @returns {void}\n   */\n  function setBalance(newBalance: number): void {\n    currentBalance = newBalance;\n  }\n\n  /**\n   * Return the user's current balance\n   *\n   * @returns {number}\n   */\n  function getCurrentBalance(): number {\n    return currentBalance;\n  }\n\n  /**\n   * Start the monetizationprogress event listener\n   *\n   * @returns {void}\n   */\n  function startMonetization(): void {\n    active = true;\n\n    (document as any).monetization.addEventListener(\n      MONETIZATION_PROGRESS,\n      transactionEvent\n    );\n  }\n\n  /**\n   * Stop the monetizationprogress event listener\n   *\n   * @returns {void}\n   */\n  function stopMonetization(): void {\n    active = false;\n\n    (document as any).monetization.removeEventListener(\n      MONETIZATION_PROGRESS,\n      transactionEvent\n    );\n\n    cleanup();\n  }\n\n  /**\n   * Return whether monetization is currently active\n   *\n   * @returns {boolean}\n   */\n  function isActive(): boolean {\n    return active;\n  }\n\n  /**\n   * Clean up instance variables\n   *\n   * @returns {void}\n   */\n  function cleanup(): void {\n    currentBalance = null;\n    multiplier = null;\n    onTransaction = null;\n  }\n\n  return {\n    init,\n    getCurrentBalance,\n    startMonetization,\n    stopMonetization,\n    isActive,\n  };\n};\n\nexport default BandiEvents;\n","import { IIndexable } from './interfaces';\nimport { REQUIRED_PARAMS } from './constants';\n\nexport const validateParams = (params: unknown): void => {\n  for (const key of REQUIRED_PARAMS) {\n    if (\n      (params as IIndexable)[key] === undefined ||\n      (params as IIndexable)[key] === null\n    ) {\n      throw new Error(`${key} must be provided when initializing!`);\n    }\n  }\n};\n"],"names":["getScaledAmount","amount","scale","Math","pow","toFixed","REQUIRED_PARAMS","NO_OP","BandiEvents","currentBalance","multiplier","onTransaction","active","transactionEvent","detail","assetScale","newBalance","updateBalance","Number","createTransaction","setBalance","startMonetization","document","monetization","addEventListener","init","params","Error","key","validateParams","e","getCurrentBalance","stopMonetization","removeEventListener","isActive"],"mappings":"SAoDgBA,EAAgBC,EAAgBC,GAC9C,OAAQD,EAASE,KAAKC,IAAI,IAAKF,IAAQG,QAAQH,SCpDpCI,EAAkB,CAAC,iBAAkB,cACrCC,EAAQ,OCGfC,EAAc,KAClB,IAAIC,EACAC,EACAC,EACAC,GAAS,EAwCb,SAASC,GAAiBC,OAAEA,IAC1B,IAAKF,EACH,OAEF,MAAMX,OAAEA,EAAFc,WAAUA,GAAeD,EAEzBE,YF1CwBD,WAChCA,EADgCd,OAEhCA,EAFgCQ,eAGhCA,EAHgCC,WAIhCA,IAEA,iBAgB4BD,eAC5BA,EAD4BR,OAE5BA,EAF4BS,WAG5BA,IAEA,OAAQD,EAAkBR,EAASS,EArB5BO,CAAc,CACnBR,eAAAA,EACAR,OAAQiB,OAAOlB,EAAgBC,EAAQc,IACvCL,WAAAA,IEiCmBS,CAAkB,CACnCJ,WAAAA,EACAd,OAAAA,EACAQ,eAAAA,EACAC,WAAAA,KAaJ,SAAoBM,GAClBP,EAAiBO,EAXjBI,CAAWJ,GACXL,EAAcK,GA2BhB,SAASK,IACPT,GAAS,EAERU,SAAiBC,aAAaC,iBD7FE,uBC+F/BX,GAwCJ,MAAO,CACLY,KApHF,SAAcC,GACZ,IACE,IAAMJ,SAAiBC,aACrB,UAAUI,MAAM,gCCpBOD,CAAAA,IAC7B,IAAK,MAAME,KAAOtB,EAChB,GACGoB,MAAAA,EAAsBE,GAGvB,UAAUD,SAASC,0CDiBnBC,CAAeH,GAEfjB,EAAiBiB,EAAOjB,eACxBC,EAAagB,EAAOhB,WACpBC,EAAgBe,EAAOf,eAAiBJ,EAExCc,IACA,MAAOS,GACP,UAAUH,+BAA+BG,OAuG3CC,kBAxDF,WACE,OAAOtB,GAwDPY,kBAAAA,EACAW,iBAnCF,WACEpB,GAAS,EAERU,SAAiBC,aAAaU,oBD3GE,uBC6G/BpB,GAqBFJ,EAAiB,KACjBC,EAAa,KACbC,EAAgB,MAQhBuB,SApBF,WACE,OAAOtB"}